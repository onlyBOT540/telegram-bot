import logging
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters
)
import sqlite3
import pytz
import pandas as pd
import re
import asyncio
import io

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = '8013532367:AAFZ5wtMMay6URryudqKBbHcyR-RvP5mPOQ'
ADMINS = ["viktorv_k", "nastyastroyuk"]
TIMEZONE = pytz.timezone('Europe/Moscow')
DB_NAME = 'bookings.db'
MIN_CHILDREN = 12
MAX_GROUP_SIZE = 36

# –ü—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–µ –¥–Ω–∏
HOLIDAYS = [
    "01.01.2025", "02.01.2025", "03.01.2025", "06.01.2025", "07.01.2025",
    "23.02.2025", "08.03.2025", "01.05.2025", "09.05.2025", "12.06.2025",
    "04.11.2025"
]

CALENDAR_HEADER = "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:\n(–†–∞–±–æ—á–∏–µ –¥–Ω–∏ –∫—Ä–æ–º–µ –≤—Ç–æ—Ä–Ω–∏–∫–æ–≤)"
DAY_NAMES = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]

# –û–ø–∏—Å–∞–Ω–∏—è –∑–∞–Ω—è—Ç–∏–π (–ø–æ–ª–Ω—ã–µ –≤–µ—Ä—Å–∏–∏)
CLASS_DESCRIPTIONS = {
    'energy': "üí° –ì–î–ï –†–û–ñ–î–ê–ï–¢–°–Ø –≠–õ–ï–ö–¢–†–û–≠–ù–ï–†–ì–ò–Ø? üí°\nüë´ 1-11 –∫–ª–∞—Å—Å –∏ —Å—Ç—É–¥–µ–Ω—Ç—ã –°–ü–û\n‚è∞ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å 45-60 –º–∏–Ω—É—Ç\n\n–ë–ª–∞–≥–æ–¥–∞—Ä—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º—É –∑–∞–Ω—è—Ç–∏—é —Ä–µ–±—è—Ç–∞ —É–∑–Ω–∞—é—Ç, –æ—Ç–∫—É–¥–∞ –≤ —Ä–æ–∑–µ—Ç–∫–µ –±–µ—Ä—ë—Ç—Å—è —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ –∏ –∫–∞–∫–æ–π –ø—É—Ç—å –æ—Ç —ç–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü–∏–∏ –ø—Ä–æ—Ö–æ–¥–∏—Ç —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π —Ç–æ–∫, —Ä–∞–∑–±–µ—Ä—É—Ç—Å—è, –∑–∞—á–µ–º –Ω—É–∂–Ω—ã –ø–æ–≤—ã—à–∞—é—â–∏–π –∏ –ø–æ–Ω–∏–∂–∞—é—â–∏–π —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ç–æ—Ä—ã, —á—Ç–æ —Ç–∞–∫–æ–µ –ï–¥–∏–Ω–∞—è –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∞—è —Å–µ—Ç—å (–ï–ù–≠–°), –ø–æ –∫–∞–∫–æ–º—É –ø—Ä–∏–Ω—Ü–∏–ø—É —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —ç–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü–∏–π, –∫–∞–∫–∏–µ –≤–∏–¥—ã –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —ç–Ω–µ—Ä–≥–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –∫–∞–∫ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ü–µ–ø–Ω–∞—è —è–¥–µ—Ä–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è –∏ –ø–æ—á–µ–º—É —á–µ–ª–æ–≤–µ—á–µ—Å—Ç–≤–æ —Ä–∞–∑–≤–∏–≤–∞–µ—Ç—Å—è –≤ —Å—Ç–æ—Ä–æ–Ω—É –æ—Å–≤–æ–µ–Ω–∏—è –∞—Ç–æ–º–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–∏.",
    'sources': "‚ö°Ô∏è –ò–°–¢–û–ß–ù–ò–ö–ò –≠–ù–ï–†–ì–ò–ò ‚ö°Ô∏è\nüë´ 7-11 –∫–ª–∞—Å—Å –∏ —Å—Ç—É–¥–µ–Ω—Ç—ã –°–ü–û\n‚è∞ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å 60 –º–∏–Ω—É—Ç\n\n–ù–∞ –∑–∞–Ω—è—Ç–∏–∏ —Ä–µ–±—è—Ç–∞ —É–∑–Ω–∞—é—Ç –æ–± –æ—Å–Ω–æ–≤–Ω–æ–π –∏–∑ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏—Ö —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º ‚Äì –ø–∞—Ä–Ω–∏–∫–æ–≤–æ–º —ç—Ñ—Ñ–µ–∫—Ç–µ, –ø–æ–∑–Ω–∞–∫–æ–º—è—Ç—Å—è —Å –ø—Ä–∏–Ω—Ü–∏–ø–∞–º–∏ —Ä–∞–±–æ—Ç—ã —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —ç–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü–∏–π, –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é—Ç –∏—Ö –ø–ª—é—Å—ã –∏ –º–∏–Ω—É—Å—ã –∏ –æ—Ü–µ–Ω—è—Ç –∏—Ö –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —ç–Ω–µ—Ä–≥–æ—Å–∏—Å—Ç–µ–º–∞—Ö –±—É–¥—É—â–µ–≥–æ. –ù–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∑–Ω–∞–Ω–∏–π —Ä–µ–±—è—Ç–∞ –ø–æ—Å—Ç—Ä–æ—è—Ç —Å–≤–æ—é —ç–Ω–µ—Ä–≥–æ—Å–µ—Ç—å –Ω–∞ –æ–¥–Ω–æ–π –∏–∑ –∫–æ–ª–æ–Ω–∏–∑–∏—Ä—É–µ–º—ã—Ö –ø–ª–∞–Ω–µ—Ç, –∞ —Ç–∞–∫–∂–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è.",
    'consumption': "‚ôªÔ∏è –û–°–û–ó–ù–ê–ù–ù–û–ï –ü–û–¢–†–ï–ë–õ–ï–ù–ò–ï ‚ôªÔ∏è\nüë´ 5-11 –∫–ª–∞—Å—Å –∏ —Å—Ç—É–¥–µ–Ω—Ç—ã –°–ü–û\n‚è∞ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å 60-90 –º–∏–Ω—É—Ç\n\n–°–µ–≥–æ–¥–Ω—è –º–Ω–æ–≥–∏–µ –≥–æ–≤–æ—Ä—è—Ç –æ–± —ç–∫–æ–ª–æ–≥–∏–∏ –∏ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ–º –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–∏. –ù–æ —á—Ç–æ —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç? –ù–∞ –∑–∞–Ω—è—Ç–∏–∏ —à–∫–æ–ª—å–Ω–∏–∫–∏ –Ω–µ —Ç–æ–ª—å–∫–æ —Ä–∞–∑–±–µ—Ä—É—Ç—Å—è, —á—Ç–æ —Å—á–∏—Ç–∞–µ—Ç—Å—è —ç–∫–æ–ª–æ–≥–∏—á–Ω—ã–º, –∞ —á—Ç–æ –Ω–µ—Ç, –Ω–æ –∏ –∏–∑—É—á–∞—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∏–¥—ã –æ—Ç—Ö–æ–¥–æ–≤. –£—á–∞—Å—Ç–Ω–∏–∫–∏ –ø—Ä–∏–æ–±—Ä–µ—Ç—É—Ç –ø–æ–ª–µ–∑–Ω—ã–µ —ç–∫–æ–ø—Ä–∏–≤—ã—á–∫–∏ –∏ –æ–ø—Ä–µ–¥–µ–ª—è—Ç, –∫–∞–∫–∏–µ –≤–∏–¥—ã –ø–æ—Å—É–¥—ã –∏ —É–ø–∞–∫–æ–≤–∫–∏ —ç–∫–æ–ª–æ–≥–∏—á–Ω—ã, –∞ –∫–∞–∫–∏–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏—Ç–≤–æ—Ä—è—é—Ç—Å—è –∏–º–∏.",
    'plastic': "ü•§ –ú–ò–† –ü–õ–ê–°–¢–ò–ö–ê ü•§\nüë´ 1-11 –∫–ª–∞—Å—Å –∏ —Å—Ç—É–¥–µ–Ω—Ç—ã –°–ü–û\n‚è∞ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å 45-60 –º–∏–Ω—É—Ç\n\n–ö–∞–∫ –∏ –∑–∞—á–µ–º –ø–æ—è–≤–∏–ª—Å—è –ø–ª–∞—Å—Ç–∏–∫, –≥–¥–µ –æ–Ω –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è, –∞ –≥–ª–∞–≤–Ω–æ–µ ‚Äì —á—Ç–æ –º—ã –º–æ–∂–µ–º –∏ –¥–æ–ª–∂–Ω—ã —Å–¥–µ–ª–∞—Ç—å, —á—Ç–æ–±—ã –ø–ª–∞—Å—Ç–∏–∫ –Ω–µ –±—ã–ª –ø—Ä–æ–±–ª–µ–º–æ–π? –ù–∞ –∑–∞–Ω—è—Ç–∏–∏ —Ä–µ–±—è—Ç–∞ –ø–æ–∑–Ω–∞–∫–æ–º—è—Ç—Å—è —Å –≤–∏–¥–∞–º–∏ –ø–ª–∞—Å—Ç–∏–∫–∞ –∏ –µ–≥–æ –∫–æ–¥–∞–º–∏ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏, –∞ —Ç–∞–∫–∂–µ —É–∑–Ω–∞—é—Ç, –∫–∞–∫—É—é –ø–æ–ª—å–∑—É –º–æ–∂–µ—Ç –ø—Ä–∏–Ω–µ—Å—Ç–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞—Å—Ç–∏–∫.",
    'water': "üíß –í–û–î–ê: –†–ï–°–£–†–° 21 –í–ï–ö–ê üíß\nüë´ 6-11 –∫–ª–∞—Å—Å –∏ —Å—Ç—É–¥–µ–Ω—Ç—ã –°–ü–û\n‚è∞ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å 60-90 –º–∏–Ω—É—Ç\n\n–ù–∞ –ø—Ä–∞–∫—Ç–∏–∫—É–º–µ —à–∫–æ–ª—å–Ω–∏–∫–∏ –∏–∑—É—á–∞—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –≤–æ–¥—ã –¥–ª—è —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –æ—Ä–≥–∞–Ω–∏–∑–º–∞, –Ω–æ—Ä–º—ã –µ—ë –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –ø—Ä–µ—Å–Ω–æ–π –≤–æ–¥—ã –Ω–∞ –ó–µ–º–ª–µ. –û–Ω–∏ —Ç–∞–∫–∂–µ —Ä–∞—Å—Å—á–∏—Ç–∞—é—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã, –∫–æ—Ç–æ—Ä–æ–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –±—ã—Ç—É –∑–∞ –Ω–µ–¥–µ–ª—é.",
    'materials': "‚öõÔ∏è –ò–ó –ß–ï–ì–û –í–°–Å –°–î–ï–õ–ê–ù–û? ‚öõÔ∏è\nüë´ 1-7 –∫–ª–∞—Å—Å—ã\n‚è∞ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å 40-50 –º–∏–Ω—É—Ç\n\n–®–∫–æ–ª—å–Ω–∏–∫–∏ —É–∑–Ω–∞—é—Ç, –∏–∑ –∫–∞–∫–∏—Ö ¬´–∫–∏—Ä–ø–∏—á–∏–∫–æ–≤¬ª –ø–æ—Å—Ç—Ä–æ–µ–Ω–∞ –í—Å–µ–ª–µ–Ω–Ω–∞—è, –∏—Å—Å–ª–µ–¥—É—é—Ç —Å—Ç—Ä–æ–µ–Ω–∏–µ –∞—Ç–æ–º–∞ –∏ –æ–±—Å—É–¥—è—Ç, –∫–∞–∫ ¬´–Ω–µ–¥–µ–ª–∏–º—ã–µ¬ª —á–∞—Å—Ç–∏—Ü—ã –æ–±—ä–µ–¥–∏–Ω—è—é—Ç—Å—è, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –≤—Å—ë –º–Ω–æ–≥–æ–æ–±—Ä–∞–∑–∏–µ –≤–µ—â–µ—Å—Ç–≤ –≤–æ–∫—Ä—É–≥ –Ω–∞—Å.",
    'quantum': "üíª –ö–í–ê–ù–¢–û–í–´–ï –¢–ï–•–ù–û–õ–û–ì–ò–ò üíª\nüë´ 7-11 –∫–ª–∞—Å—Å –∏ —Å—Ç—É–¥–µ–Ω—Ç—ã –°–ü–û\n‚è∞ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å 60-90 –º–∏–Ω—É—Ç\n\n–£—á–∞—Å—Ç–Ω–∏–∫–∏ –ø–æ–∑–Ω–∞–∫–æ–º—è—Ç—Å—è —Å –æ—Å–Ω–æ–≤–∞–º–∏ –∫–≤–∞–Ω—Ç–æ–≤–æ–π —Ñ–∏–∑–∏–∫–∏: —É–∑–Ω–∞—é—Ç, —á—Ç–æ —Ç–∞–∫–æ–µ –∫–≤–∞–Ω—Ç—ã, –ø—Ä–∏–Ω—Ü–∏–ø –Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ—Å—Ç–∏ –ì–µ–π–∑–µ–Ω–±–µ—Ä–≥–∞ –∏ –∫–æ—Ä–ø—É—Å–∫—É–ª—è—Ä–Ω–æ-–≤–æ–ª–Ω–æ–≤–æ–π –¥—É–∞–ª–∏–∑–º –Ω–∞ –ø—Ä–æ—Å—Ç—ã—Ö –ø—Ä–∏–º–µ—Ä–∞—Ö."
}

CLASSES = {
    'energy': "üí° –ì–¥–µ —Ä–æ–∂–¥–∞–µ—Ç—Å—è —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è?",
    'sources': "‚ö°Ô∏è –ò—Å—Ç–æ—á–Ω–∏–∫–∏ —ç–Ω–µ—Ä–≥–∏–∏",
    'consumption': "‚ôªÔ∏è –û—Å–æ–∑–Ω–∞–Ω–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ",
    'plastic': "ü•§ –ú–∏—Ä –ø–ª–∞—Å—Ç–∏–∫–∞",
    'water': "üíß –í–æ–¥–∞: —Ä–µ—Å—É—Ä—Å 21 –≤–µ–∫–∞",
    'materials': "‚öõÔ∏è –ò–∑ —á–µ–≥–æ –≤—Å—ë —Å–¥–µ–ª–∞–Ω–æ?",
    'quantum': "üíª –ö–≤–∞–Ω—Ç–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏"
}

TIMES = ["10:00", "11:00", "12:00", "13:00", "14:00", "15:00", "16:00"]

def get_db():
    conn = sqlite3.connect(DB_NAME)
    conn.execute("PRAGMA journal_mode=WAL")
    conn.row_factory = sqlite3.Row
    return conn

def init_db():
    with get_db() as conn:
        conn.execute('''CREATE TABLE IF NOT EXISTS bookings (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            date TEXT NOT NULL,
            day TEXT NOT NULL,
            time TEXT NOT NULL,
            class TEXT NOT NULL,
            contact_name TEXT NOT NULL,
            contact_phone TEXT NOT NULL,
            organization TEXT NOT NULL,
            grade TEXT NOT NULL,
            children_count INTEGER NOT NULL,
            username TEXT NOT NULL,
            UNIQUE(date, time)
        )''')
        conn.commit()

def is_available_date(date):
    now = datetime.now(TIMEZONE).date()
    if date < now:
        return False
    if date.weekday() in [1, 5, 6]:  # –í—Ç–æ—Ä–Ω–∏–∫–∏ –∏ –≤—ã—Ö–æ–¥–Ω—ã–µ
        return False
    return date.strftime("%d.%m.%Y") not in HOLIDAYS

async def generate_calendar(query, context, year=None, month=None):
    today = datetime.now(TIMEZONE).date()
    year = year or today.year
    month = month or today.month

    first_day = datetime(year, month, 1)
    last_day = datetime(year, month % 12 + 1, 1) - timedelta(days=1)

    keyboard = []
    month_name = first_day.strftime("%B %Y")
    keyboard.append([
        InlineKeyboardButton("‚óÄÔ∏è", callback_data=f"cal_prev_{year}_{month}"),
        InlineKeyboardButton(month_name, callback_data="ignore"),
        InlineKeyboardButton("‚ñ∂Ô∏è", callback_data=f"cal_next_{year}_{month}")
    ])

    keyboard.append([InlineKeyboardButton(day, callback_data="ignore") for day in DAY_NAMES])

    week = []
    for _ in range(first_day.weekday()):
        week.append(InlineKeyboardButton(" ", callback_data="ignore"))

    for day in range(1, last_day.day + 1):
        date = datetime(year, month, day).date()
        if is_available_date(date):
            btn_text = f"*{day}*" if date == today else str(day)
            week.append(InlineKeyboardButton(
                btn_text,
                callback_data=f"date_{date.strftime('%d.%m.%Y')}"
            ))
        else:
            week.append(InlineKeyboardButton("‚úñÔ∏è", callback_data="ignore"))

        if len(week) == 7:
            keyboard.append(week)
            week = []

    if week:
        keyboard.append(week)

    keyboard.append([
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_classes'),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='back_to_menu')
    ])

    await query.edit_message_text(
        text=CALENDAR_HEADER,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="Markdown"
    )

def main_menu():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üìù –ó–∞–ø–∏—Å–∞—Ç—å –≥—Ä—É–ø–ø—É", callback_data='signup')],
        [InlineKeyboardButton("üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏", callback_data='my_bookings')],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data='cancel_booking')]
    ])

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    welcome_text = (
        "¬´–ê—Ç–æ–º–Ω—ã–π –ø—Ä–∞–∫—Ç–∏–∫—É–º¬ª ‚Äî —ç—Ç–æ —Å–µ—Ä–∏—è –∑–∞–Ω—è—Ç–∏–π, –ø–æ—Å–≤—è—â—ë–Ω–Ω—ã—Ö –∞—Ç–æ–º–Ω—ã–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º. "
        "–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è, –∞—Ç–æ–º –≤ –∫–æ—Å–º–æ—Å–µ –∏ –º–µ–¥–∏—Ü–∏–Ω–µ, –∫–≤–∞–Ω—Ç–æ–≤—ã–µ –∫–æ–º–ø—å—é—Ç–µ—Ä—ã, –∑–µ–ª—ë–Ω–∞—è —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞, "
        "–∞—Ç–æ–º–Ω—ã–π –ª–µ–¥–æ–∫–æ–ª—å–Ω—ã–π —Ñ–ª–æ—Ç, —Ç–µ—Ä–º–æ—è–¥–µ—Ä–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è –∏ –∑–∞–º—ã–∫–∞–Ω–∏–µ —è–¥–µ—Ä–Ω–æ–≥–æ —Ç–æ–ø–ª–∏–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ ‚Äì "
        "—ç—Ç–∏ –∏ –¥—Ä—É–≥–∏–µ —Ç–µ–º—ã —à–∫–æ–ª—å–Ω–∏–∫–∏ —Å–º–æ–≥—É—Ç –ø–æ–¥—Ä–æ–±–Ω–æ —Ä–∞–∑–æ–±—Ä–∞—Ç—å —Å –ø–æ–º–æ—â—å—é –∏–≥—Ä–æ–≤—ã—Ö –∏ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π.\n\n"
        "üìå –í—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ò–¶–ê–≠ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ. –ó–∞–Ω—è—Ç–∏—è –ø—Ä–æ–≤–æ–¥—è—Ç—Å—è –ø–æ –±—É–¥–Ω—è–º –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø "
        f"–æ—Ç {MIN_CHILDREN} –¥–æ {MAX_GROUP_SIZE} —á–µ–ª–æ–≤–µ–∫ –ø–æ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–ø–∏—Å–∏ –ø–æ –∞–¥—Ä–µ—Å—É: —É–ª. –ö–æ–º–∞—Ä–æ–≤–∞, –¥.6."
    )

    await update.message.reply_text(
        welcome_text,
        reply_markup=main_menu()
    )

async def show_classes(query):
    keyboard = [
        [InlineKeyboardButton(name, callback_data=f'class_{key}')]
        for key, name in CLASSES.items()
    ]
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu')])

    await query.edit_message_text(
        text="üè´ –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–Ω—è—Ç–∏–µ:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def show_class_description(query, class_type):
    description = CLASS_DESCRIPTIONS.get(class_type, "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    keyboard = [
        [InlineKeyboardButton("üìÖ –í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É", callback_data=f'book_{class_type}')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_classes')]
    ]
    await query.edit_message_text(
        text=description,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = query.data

    try:
        if data == 'signup':
            await show_classes(query)
        elif data == 'my_bookings':
            await show_user_bookings(query)
        elif data == 'cancel_booking':
            await show_user_bookings_for_cancellation(query)
        elif data == 'back_to_menu':
            await query.edit_message_text(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())
        elif data == 'back_to_classes':
            await show_classes(query)
        elif data.startswith('class_'):
            await show_class_description(query, data[6:])
        elif data.startswith('book_'):
            context.user_data['class'] = data[5:]
            await generate_calendar(query, context)
        elif data.startswith('cal_prev_'):
            _, _, year, month = data.split('_')
            await generate_calendar(query, context, int(year), int(month) - 1)
        elif data.startswith('cal_next_'):
            _, _, year, month = data.split('_')
            await generate_calendar(query, context, int(year), int(month) + 1)
        elif data.startswith('date_'):
            context.user_data['date'] = data[5:]
            await choose_time(query, context)
        elif data.startswith('time_'):
            context.user_data['time'] = data[5:]
            await ask_contact_info(query, context)
        elif data.startswith('cancel_'):
            await cancel_booking(query, int(data[7:]))
        elif data == 'admin_all_bookings':
            await show_all_bookings(query)
        elif data == 'admin_today':
            await show_today_bookings(query)
        else:
            await query.edit_message_text(text="–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞", reply_markup=main_menu())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–Ω–æ–ø–æ–∫: {e}")
        await query.edit_message_text(
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=main_menu()
        )

async def choose_time(query, context):
    date = context.user_data['date']

    try:
        with get_db() as conn:
            booked_times = {row['time'] for row in conn.execute(
                'SELECT time FROM bookings WHERE date=?',
                (date,)
            )}

        available_times = [time for time in TIMES if time not in booked_times]

        if not available_times:
            await query.edit_message_text(
                text="‚õî –ù–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –≤—Å–µ –≤—Ä–µ–º–µ–Ω–∞ –∑–∞–Ω—è—Ç—ã.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f'book_{context.user_data["class"]}')],
                    [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='back_to_menu')]
                ])
            )
            return

        keyboard = [
            [InlineKeyboardButton(time, callback_data=f'time_{time}')]
            for time in available_times
        ]
        keyboard.append([
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f'book_{context.user_data["class"]}'),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='back_to_menu')
        ])

        await query.edit_message_text(
            text=f"‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è {CLASSES[context.user_data['class']]} {date}:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤—Ä–µ–º–µ–Ω–∏: {e}")
        await query.edit_message_text(
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω.",
            reply_markup=main_menu()
        )

async def ask_contact_info(query, context):
    context.user_data['step'] = 'contact_name'
    await query.edit_message_text(
        text="üë§ –í–≤–µ–¥–∏—Ç–µ –§–ò–û –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–≥–æ –ª–∏—Ü–∞ (–ø–æ–ª–Ω–æ—Å—Ç—å—é):",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='back_to_menu')]
        ])
    )

async def process_contact_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data = context.user_data
    message = update.message

    if 'step' not in user_data:
        await message.reply_text("‚ùå –û—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–ø–∏—Å—å –∑–∞–Ω–æ–≤–æ.", reply_markup=main_menu())
        return

    try:
        if user_data['step'] == 'contact_name':
            if not message.text.strip():
                await message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–µ–ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:")
                return
            user_data['contact_name'] = message.text.strip()
            user_data['step'] = 'contact_phone'
            await message.reply_text("üì± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: +79161234567):")

        elif user_data['step'] == 'contact_phone':
            if not re.match(r'^\+?\d{10,15}$', message.text):
                await message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
                return
            user_data['contact_phone'] = message.text
            user_data['step'] = 'organization'
            await message.reply_text("üè¢ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:")

        elif user_data['step'] == 'organization':
            if not message.text.strip():
                await message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–µ–ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:")
                return
            user_data['organization'] = message.text.strip()
            user_data['step'] = 'grade'
            await message.reply_text("üè´ –í–≤–µ–¥–∏—Ç–µ –∫–ª–∞—Å—Å/–∫—É—Ä—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5–ê –∏–ª–∏ 1 –∫—É—Ä—Å):")

        elif user_data['step'] == 'grade':
            if not message.text.strip():
                await message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–µ–ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:")
                return
            user_data['grade'] = message.text.strip()
            user_data['step'] = 'children_count'
            await message.reply_text(
                f"üë∂ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π (–æ—Ç {MIN_CHILDREN} –¥–æ {MAX_GROUP_SIZE}):",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='back_to_menu')]
                ])
            )

        elif user_data['step'] == 'children_count':
            try:
                count = int(message.text)
                if count < MIN_CHILDREN or count > MAX_GROUP_SIZE:
                    await message.reply_text(f"‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç {MIN_CHILDREN} –¥–æ {MAX_GROUP_SIZE}:")
                    return
                user_data['children_count'] = count
                await save_booking(update, context)
            except ValueError:
                await message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ —Ü–∏—Ñ—Ä–∞–º–∏:")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
        await message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–ø–∏—Å—å –∑–∞–Ω–æ–≤–æ.",
            reply_markup=main_menu()
        )

async def save_booking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data = context.user_data
    user = update.effective_user

    try:
        with get_db() as conn:
            existing = conn.execute(
                'SELECT 1 FROM bookings WHERE date=? AND time=?',
                (user_data['date'], user_data['time'])
            ).fetchone()

            if existing:
                await update.message.reply_text(
                    "‚õî –≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ.",
                    reply_markup=main_menu()
                )
                return

            conn.execute('''
                INSERT INTO bookings (date, day, time, class, contact_name,
                                    contact_phone, organization, grade,
                                    children_count, username)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', (
                user_data['date'],
                datetime.strptime(user_data['date'], '%d.%m.%Y').strftime('%A'),
                user_data['time'],
                CLASSES[user_data['class']],
                user_data['contact_name'],
                user_data['contact_phone'],
                user_data['organization'],
                user_data['grade'],
                user_data['children_count'],
                user.username or str(user.id)
            ))
            conn.commit()

            await notify_admins(context, {
                'date': user_data['date'],
                'time': user_data['time'],
                'class': CLASSES[user_data['class']],
                'contact_name': user_data['contact_name'],
                'contact_phone': user_data['contact_phone'],
                'organization': user_data['organization'],
                'grade': user_data['grade'],
                'children_count': user_data['children_count']
            }, user.username)

            confirm_message = (
                "‚úÖ <b>–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!</b>\n\n"
                f"üìÖ <b>–î–∞—Ç–∞:</b> {user_data['date']}\n"
                f"‚è∞ <b>–í—Ä–µ–º—è:</b> {user_data['time']}\n"
                f"üè´ <b>–ó–∞–Ω—è—Ç–∏–µ:</b> {CLASSES[user_data['class']]}\n"
                f"üë§ <b>–ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ:</b> {user_data['contact_name']}\n"
                f"üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {user_data['contact_phone']}\n"
                f"üè¢ <b>–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è:</b> {user_data['organization']}\n"
                f"üéì <b>–ö–ª–∞—Å—Å/–∫—É—Ä—Å:</b> {user_data['grade']}\n"
                f"üë∂ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π:</b> {user_data['children_count']}"
            )

            await update.message.reply_text(
                confirm_message,
                reply_markup=main_menu(),
                parse_mode="HTML"
            )

    except sqlite3.IntegrityError:
        await update.message.reply_text(
            "‚õî –≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.",
            reply_markup=main_menu()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏.",
            reply_markup=main_menu()
        )
    finally:
        context.user_data.clear()

async def show_user_bookings(query):
    username = query.from_user.username or str(query.from_user.id)

    try:
        with get_db() as conn:
            bookings = conn.execute('''
                SELECT id, date, time, class, organization, grade, children_count
                FROM bookings
                WHERE username = ?
                ORDER BY date, time
            ''', (username,)).fetchall()

        if not bookings:
            await query.edit_message_text(
                text="üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.",
                reply_markup=main_menu()
            )
            return

        message = "üìã <b>–í–∞—à–∏ –∑–∞–ø–∏—Å–∏:</b>\n\n"
        for booking in bookings:
            message += (
                f"üìÖ <b>{booking['date']}</b> –≤ <b>{booking['time']}</b>\n"
                f"üè´ {booking['class']}\n"
                f"üè¢ {booking['organization']} ({booking['grade']})\n"
                f"üë∂ –î–µ—Ç–µ–π: {booking['children_count']}\n\n"
            )

        await query.edit_message_text(
            text=message,
            reply_markup=main_menu(),
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π: {e}")
        await query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π.",
            reply_markup=main_menu()
        )

async def show_user_bookings_for_cancellation(query):
    username = query.from_user.username or str(query.from_user.id)

    try:
        with get_db() as conn:
            bookings = conn.execute('''
                SELECT id, date, time, class
                FROM bookings
                WHERE username = ?
                ORDER BY date, time
            ''', (username,)).fetchall()

        if not bookings:
            await query.edit_message_text(
                text="üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
                reply_markup=main_menu()
            )
            return

        keyboard = [
            [InlineKeyboardButton(
                f"{booking['date']} {booking['time']} - {booking['class']}",
                callback_data=f"cancel_{booking['id']}"
            )]
            for booking in bookings
        ]
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu')])

        await query.edit_message_text(
            text="‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è –æ—Ç–º–µ–Ω—ã:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π: {e}")
        await query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π.",
            reply_markup=main_menu()
        )

async def cancel_booking(query, booking_id):
    username = query.from_user.username or str(query.from_user.id)

    try:
        with get_db() as conn:
            booking = conn.execute('''
                SELECT *
                FROM bookings
                WHERE id = ?
                AND username = ?
            ''', (booking_id, username)).fetchone()

            if not booking:
                await query.edit_message_text(
                    text="‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –µ—ë –æ—Ç–º–µ–Ω—ã.",
                    reply_markup=main_menu()
                )
                return

            conn.execute('DELETE FROM bookings WHERE id = ?', (booking_id,))
            conn.commit()

            cancel_message = (
                "‚ùå <b>–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞:</b>\n\n"
                f"üìÖ <b>–î–∞—Ç–∞:</b> {booking['date']} ({booking['day']})\n"
                f"‚è∞ <b>–í—Ä–µ–º—è:</b> {booking['time']}\n"
                f"üè´ <b>–ó–∞–Ω—è—Ç–∏–µ:</b> {booking['class']}\n"
                f"üë§ <b>–ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ:</b> {booking['contact_name']}\n"
                f"üè¢ <b>–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è:</b> {booking['organization']}"
            )

            await query.edit_message_text(
                text=cancel_message,
                reply_markup=main_menu(),
                parse_mode="HTML"
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏: {e}")
        await query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏.",
            reply_markup=main_menu()
        )

async def notify_admins(context: ContextTypes.DEFAULT_TYPE, booking_data: dict, username: str = None):
    try:
        admin_message = (
            "üîî <b>–ù–û–í–ê–Ø –ó–ê–ü–ò–°–¨</b>\n\n"
            f"üìÖ <b>–î–∞—Ç–∞:</b> {booking_data['date']}\n"
            f"‚è∞ <b>–í—Ä–µ–º—è:</b> {booking_data['time']}\n"
            f"üè´ <b>–ó–∞–Ω—è—Ç–∏–µ:</b> {booking_data['class']}\n"
            f"üë§ <b>–ö–æ–Ω—Ç–∞–∫—Ç:</b> {booking_data['contact_name']}\n"
            f"üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {booking_data['contact_phone']}\n"
            f"üè¢ <b>–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è:</b> {booking_data['organization']}\n"
            f"üéì <b>–ö–ª–∞—Å—Å/–∫—É—Ä—Å:</b> {booking_data['grade']}\n"
            f"üë∂ <b>–î–µ—Ç–µ–π:</b> {booking_data['children_count']}\n"
            f"üë§ <b>–ó–∞–ø–∏—Å–∞–ª:</b> @{username if username else '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n\n"
            f"üïí <i>–ó–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞: {datetime.now(TIMEZONE).strftime('%d.%m.%Y %H:%M')}</i>"
        )

        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üìã –í—Å–µ –∑–∞–ø–∏—Å–∏", callback_data='admin_all_bookings')],
            [InlineKeyboardButton("üìÖ –°–µ–≥–æ–¥–Ω—è", callback_data='admin_today')]
        ])

        for admin in ADMINS:
            try:
                await context.bot.send_message(
                    chat_id=admin,
                    text=admin_message,
                    reply_markup=keyboard,
                    parse_mode="HTML"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ {admin}: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ notify_admins: {e}")

async def show_all_bookings(query):
    try:
        with get_db() as conn:
            bookings = conn.execute('''
                SELECT date, time, class, contact_name, organization
                FROM bookings
                ORDER BY date DESC
                LIMIT 20
            ''').fetchall()

        message = "üìã <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 –∑–∞–ø–∏—Å–µ–π:</b>\n\n"
        for booking in bookings:
            message += (
                f"üìÖ <b>{booking['date']}</b> {booking['time']}\n"
                f"üè´ {booking['class']}\n"
                f"üë§ {booking['contact_name']} ({booking['organization']})\n\n"
            )

        await query.edit_message_text(
            text=message,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu')]
            ])
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π: {e}")
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–ø–∏—Å–µ–π",
            reply_markup=main_menu()
        )

async def show_today_bookings(query):
    today = datetime.now(TIMEZONE).strftime('%d.%m.%Y')

    try:
        with get_db() as conn:
            bookings = conn.execute('''
                SELECT time, class, contact_name, organization
                FROM bookings
                WHERE date = ?
                ORDER BY time
            ''', (today,)).fetchall()

        message = f"üìÖ <b>–ó–∞–ø–∏—Å–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ({today}):</b>\n\n"
        for booking in bookings:
            message += (
                f"‚è∞ {booking['time']} - {booking['class']}\n"
                f"üë§ {booking['contact_name']} ({booking['organization']})\n\n"
            )

        await query.edit_message_text(
            text=message,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu')]
            ])
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π: {e}")
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–ø–∏—Å–µ–π",
            reply_markup=main_menu()
        )

async def export_to_excel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.username not in ADMINS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return

    try:
        with get_db() as conn:
            df = pd.read_sql('''
                SELECT
                    date as "–î–∞—Ç–∞", day as "–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏", time as "–í—Ä–µ–º—è", 
                    class as "–ó–∞–Ω—è—Ç–∏–µ", contact_name as "–ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ", 
                    contact_phone as "–¢–µ–ª–µ—Ñ–æ–Ω", organization as "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è", 
                    grade as "–ö–ª–∞—Å—Å/–∫—É—Ä—Å", children_count as "–ö–æ–ª-–≤–æ –¥–µ—Ç–µ–π", 
                    username as "Username"
                FROM bookings
                ORDER BY date, time
            ''', conn)

        if df.empty:
            await update.message.reply_text("‚ÑπÔ∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return

        output = io.BytesIO()
        with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
            df.to_excel(writer, index=False, sheet_name='–ó–∞–ø–∏—Å–∏')

            workbook = writer.book
            worksheet = writer.sheets['–ó–∞–ø–∏—Å–∏']

            for i, col in enumerate(df.columns):
                max_len = max(df[col].astype(str).map(len).max(), len(col)) + 2
                worksheet.set_column(i, i, max_len)

            worksheet.autofilter(0, 0, 0, len(df.columns) - 1)

        output.seek(0)
        await update.message.reply_document(
            document=output,
            filename=f"–ó–∞–ø–∏—Å–∏_{datetime.now().strftime('%Y-%m-%d')}.xlsx",
            caption="üìä –í—Å–µ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}")


async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.username not in ADMINS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return

    try:
        today = datetime.now(TIMEZONE).date()
        next_week = today + timedelta(days=7)

        with get_db() as conn:
            stats = {
                'total': conn.execute("SELECT COUNT(*) FROM bookings").fetchone()[0] or 0,
                'today': conn.execute("SELECT COUNT(*) FROM bookings WHERE date=?",
                                      (today.strftime('%d.%m.%Y'),)).fetchone()[0] or 0,
                'next_7_days': conn.execute('''
                                            SELECT date, time, class, contact_name, contact_phone, organization, grade, children_count
                                            FROM bookings
                                            WHERE date >= ? AND date < ?
                                            ORDER BY date, time
                                            ''',
                                            (today.strftime('%d.%m.%Y'), next_week.strftime('%d.%m.%Y'))).fetchall(),
                'by_class': conn.execute('''
                                         SELECT class, COUNT(*) as count
                                         FROM bookings
                                         WHERE class IS NOT NULL
                                         GROUP BY class
                                         ORDER BY count DESC
                                             LIMIT 10
                                         ''').fetchall() or []
            }

        message = [
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø–∏—Å–µ–π</b>",
            f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: <b>{stats['total']}</b>",
            f"‚Ä¢ –ù–∞ —Å–µ–≥–æ–¥–Ω—è: <b>{stats['today']}</b>",
            ""
        ]

        # –ó–∞–ø–∏—Å–∏ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 7 –¥–Ω–µ–π (–≤–∫–ª—é—á–∞—è —Å–µ–≥–æ–¥–Ω—è)
        message.append("<b>–ë–ª–∏–∂–∞–π—à–∏–µ 7 –¥–Ω–µ–π:</b>")

        if stats['next_7_days']:
            current_date = None
            for booking in stats['next_7_days']:
                booking_date = booking['date']  # –£–∂–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ dd.mm.YYYY

                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–∞—Ç—ã –µ—Å–ª–∏ –æ–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
                if booking_date != current_date:
                    day_name = datetime.strptime(booking_date, '%d.%m.%Y').strftime('%A')
                    message.append(f"\nüìÖ <b>{booking_date} ({day_name})</b>")
                    current_date = booking_date

                message.extend([
                    f"‚è∞ <b>{booking['time']}</b> - {booking['class']}",
                    f"üë§ {booking['contact_name']} ({booking['organization']})",
                    f"üì± {booking['contact_phone']} | üë∂ {booking['children_count']}",
                    ""
                ])
        else:
            message.append("\n–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π")

        # –¢–æ–ø –∑–∞–Ω—è—Ç–∏–π
        message.extend(["", "<b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è:</b>"])
        if stats['by_class']:
            for i, row in enumerate(stats['by_class'], 1):
                message.append(f"{i}. {row['class']}: <b>{row['count']}</b>")
        else:
            message.append("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")

        await update.message.reply_text("\n".join(message), parse_mode="HTML")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}", exc_info=True)
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")

async def admin_commands(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.username not in ADMINS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return

    commands = [
        "/export - –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –≤ Excel",
        "/stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É",
        "/admin - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –º–µ–Ω—é"
    ]
    await update.message.reply_text("üîê –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã:\n" + "\n".join(commands))

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.error("Exception:", exc_info=context.error)
    if update.message:
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=main_menu()
        )

def main():
    init_db()
    logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

    application = Application.builder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("admin", admin_commands, filters=filters.User(username=ADMINS)))
    application.add_handler(CommandHandler("export", export_to_excel, filters=filters.User(username=ADMINS)))
    application.add_handler(CommandHandler("stats", show_stats, filters=filters.User(username=ADMINS)))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, process_contact_info))
    application.add_error_handler(error_handler)

    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    application.run_polling()

if __name__ == '__main__':
    main()